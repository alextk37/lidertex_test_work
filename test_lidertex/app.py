import streamlit as st
import pandas as pd
from parser import Parser
import io

from graphs import (plot_total_daily_sales, 
                    plot_price_vs_sales, 
                    plot_price_segments,
                    plot_reviews_segments,
                    plot_ratings_distribution,
                    plot_action_distribution,
                    plot_sales_action_heatmap,
                    plot_photos_distribution,
                    plot_marketplace_days_distribution)
from abc_graph import plot_abc_classic

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ Wide mode —Å —Ç–µ–º–Ω—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
st.set_page_config(layout="wide", page_title="–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–≤—Ü–µ –õ–∏–¥–µ—Ä –î–æ–º")

# –ò–Ω—ä–µ–∫—Ü–∏—è CSS –¥–ª—è —Ç–µ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
st.markdown(
    """
    <style>
    body {
        background-color: #2e2e2e;
        color: #f0f0f0;
    }
    .reportview-container .main .block-container {
        background-color: #2e2e2e;
        color: #f0f0f0;
    }
    .sidebar .sidebar-content {
        background-color: #1c1c1c;
        color: #f0f0f0;
    }
    </style>
    """,
    unsafe_allow_html=True,
)

def load_data():
    parser = Parser()
    return parser.get_combined_data()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏
def get_company_info():
    parser = Parser()
    legal_info = parser.get_legal_info()
    seller_info = parser.get_seller_info()
    votes = parser.get_votes()
    return legal_info, seller_info, votes

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É; –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äì –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è ("info")
if 'page' not in st.session_state:
    st.session_state.page = 'info'

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ (–¥–ª—è —Ç–∞–±–ª–∏—Ü—ã)
if 'data' not in st.session_state:
    st.session_state.data = load_data()
    st.success("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã")

# –í–µ—Ä—Ö–Ω—è—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è (–¥–æ–±–∞–≤–ª—è–µ–º —á–µ—Ç–≤—ë—Ä—Ç—É—é –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
col1, col2, col3, col4 = st.columns(4)

with col1:
    if st.button("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
        st.session_state.page = 'info'
with col2:
    if st.button("–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞"):
        st.session_state.page = 'table'
with col3:
    if st.button("–ì—Ä–∞—Ñ–∏–∫–∏"):
        st.session_state.page = 'graphs'
with col4:
    if st.button("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
        st.session_state.data = load_data()
        st.success("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" (–≥–ª–∞–≤–Ω–∞—è)
if st.session_state.page == 'info':
    st.title("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ :office:")
    
    legal_info, seller_info, votes = get_company_info()
    st.markdown(f"**–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:** {legal_info.get('–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ', '')}")
    st.markdown(f"**–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:** {legal_info.get('–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ', '')}")
    st.markdown(f"**–ò–ù–ù:** {legal_info.get('–ò–ù–ù', '')}")
    st.markdown(f"**–û–ì–†–ù:** {legal_info.get('–û–ì–†–ù', '')}")
    st.markdown(f"**–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å:** {legal_info.get('–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å', '')}")
    st.markdown(f"**–¢–æ—Ä–≥–æ–≤–∞—è –º–∞—Ä–∫–∞:** {legal_info.get('–¢–æ—Ä–≥–æ–≤–∞—è –º–∞—Ä–∫–∞', '')}")
    
    st.markdown("### –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ üïµÔ∏è")
    st.markdown(f"üñ•Ô∏è **–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω:** [–ü–µ—Ä–µ–π—Ç–∏]({seller_info.get('–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω', '')})")
    st.markdown(f":star: **–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞:** {seller_info.get('–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞', '')}")
    st.markdown(f"üëç **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤:** {seller_info.get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤', '')}")
    st.markdown(f"üóìÔ∏è **–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** {seller_info.get('–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '')}")
    st.markdown(f"ü§ë **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂:** {seller_info.get('–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂', '')}")
    st.markdown(f"üòÑ **–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∫—É–ø–∞:** {seller_info.get('–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∫—É–ø–∞', '')}%")
    st.markdown(f"üìú **–î–∂–µ–º:** {seller_info.get('–î–∂–µ–º', '')}")
    
    st.markdown("### –ò–∑–±—Ä–∞–Ω–Ω–æ–µ :heart:")
    st.markdown(f"üíü **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–π –º–∞–≥–∞–∑–∏–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:** {votes}")

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ "–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞" —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ —Ç–∞–±–ª–∏—Ü–µ–π
elif st.session_state.page == 'table':
    st.title("–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ DataFrame
    df = pd.DataFrame(st.session_state.data)
    
    st.sidebar.subheader("–§–∏–ª—å—Ç—Ä—ã")
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    name_filter = st.sidebar.text_input("–ü–æ–∏—Å–∫:")
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    min_rating = float(df['–†–µ–π—Ç–∏–Ω–≥'].min())
    max_rating = float(df['–†–µ–π—Ç–∏–Ω–≥'].max())
    rating_filter = st.sidebar.slider("–†–µ–π—Ç–∏–Ω–≥", min_value=min_rating, max_value=max_rating, value=(min_rating, max_rating))
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
    min_price = float(df['–¶–µ–Ω–∞ (—Ä—É–±)'].min())
    max_price = float(df['–¶–µ–Ω–∞ (—Ä—É–±)'].max())
    price_filter = st.sidebar.slider("–¶–µ–Ω–∞ (—Ä—É–±)", min_value=min_price, max_value=max_price, value=(min_price, max_price))
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–Ω–µ–π –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ
    min_days = int(df['–î–Ω–µ–π –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ'].min())
    max_days = int(df['–î–Ω–µ–π –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ'].max())
    days_filter = st.sidebar.slider("–î–Ω–µ–π –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ", min_value=min_days, max_value=max_days, value=(min_days, max_days))
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –∞–∫—Ü–∏–∏
    action_options = df['–ê–∫—Ü–∏—è'].unique().tolist()
    action_filter = st.sidebar.multiselect("–ê–∫—Ü–∏—è", options=action_options, default=action_options)
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–¥–∞–∂
    min_sales = int(df['–ü—Ä–æ–¥–∞–∂–∏, –∫–æ–ª-–≤–æ'].min())
    max_sales = int(df['–ü—Ä–æ–¥–∞–∂–∏, –∫–æ–ª-–≤–æ'].max())
    sales_filter = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂", min_value=min_sales, max_value=max_sales, value=(min_sales, max_sales))
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º
    min_stock = int(df['–û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫'].min())
    max_stock = int(df['–û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫'].max())
    stock_filter = st.sidebar.slider("–û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫", min_value=min_stock, max_value=max_stock, value=(min_stock, max_stock))
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç–∑—ã–≤–æ–≤
    min_reviews = int(df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤'].min())
    max_reviews = int(df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤'].max())
    reviews_filter = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤", min_value=min_reviews, max_value=max_reviews, value=(min_reviews, max_reviews))
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —É—á–∞—Å—Ç–∏—é –≤ —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
    ad_options = ["–í—Å–µ", "–£—á–∞—Å—Ç–≤—É–µ—Ç", "–ù–µ —É—á–∞—Å—Ç–≤—É–µ—Ç"]
    ad_filter = st.sidebar.radio("–£—á–∞—Å—Ç–∏–µ –≤ —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏", options=ad_options, index=0)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫ DataFrame
    filtered_df = df[
        (df['–†–µ–π—Ç–∏–Ω–≥'] >= rating_filter[0]) & (df['–†–µ–π—Ç–∏–Ω–≥'] <= rating_filter[1]) &
        (df['–¶–µ–Ω–∞ (—Ä—É–±)'] >= price_filter[0]) & (df['–¶–µ–Ω–∞ (—Ä—É–±)'] <= price_filter[1]) &
        (df['–î–Ω–µ–π –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ'] >= days_filter[0]) & (df['–î–Ω–µ–π –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ'] <= days_filter[1]) &
        (df['–ê–∫—Ü–∏—è'].isin(action_filter)) &
        (df['–ü—Ä–æ–¥–∞–∂–∏, –∫–æ–ª-–≤–æ'] >= sales_filter[0]) & (df['–ü—Ä–æ–¥–∞–∂–∏, –∫–æ–ª-–≤–æ'] <= sales_filter[1]) &
        (df['–û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫'] >= stock_filter[0]) & (df['–û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫'] <= stock_filter[1]) &
        (df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤'] >= reviews_filter[0]) & (df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤'] <= reviews_filter[1])
    ]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —É—á–∞—Å—Ç–∏—é –≤ —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
    if ad_filter == "–£—á–∞—Å—Ç–≤—É–µ—Ç":
        filtered_df = filtered_df[filtered_df['–°—Ä–µ–¥–Ω—è—è —Ä–µ–∫–ª–∞–º–Ω–∞—è —Å—Ç–∞–≤–∫–∞, ‚ÇΩ'] > 0]
    elif ad_filter == "–ù–µ —É—á–∞—Å—Ç–≤—É–µ—Ç":
        filtered_df = filtered_df[filtered_df['–°—Ä–µ–¥–Ω—è—è —Ä–µ–∫–ª–∞–º–Ω–∞—è —Å—Ç–∞–≤–∫–∞, ‚ÇΩ'] == 0]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: —É–±–∏—Ä–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç–∏, –¥–æ–±–∞–≤–ª—è–µ–º SKU
    display_columns = [
        '–ù–∞–∑–≤–∞–Ω–∏–µ', '–†–µ–π—Ç–∏–Ω–≥', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤', '–ê–∫—Ü–∏—è', '–¶–µ–Ω–∞ (—Ä—É–±)',
        '–û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫', 'SKU', '–ü—Ä–æ–¥–∞–∂–∏, –∫–æ–ª-–≤–æ', '–î–Ω–µ–π –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ', '–°—Ä–µ–¥–Ω—è—è —Ä–µ–∫–ª–∞–º–Ω–∞—è —Å—Ç–∞–≤–∫–∞, ‚ÇΩ'
    ]
    filtered_df = filtered_df[display_columns]
    filtered_df = filtered_df.rename(columns={'–°—Ä–µ–¥–Ω—è—è —Ä–µ–∫–ª–∞–º–Ω–∞—è —Å—Ç–∞–≤–∫–∞, ‚ÇΩ': '–°—Ä–µ–¥–Ω—è—è —Ä–µ–∫–ª–∞–º–Ω–∞—è —Å—Ç–∞–≤–∫–∞'})
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –≤ —è—á–µ–π–∫–µ "–û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫":
    def highlight_stock(row):
        try:
            stock = float(row["–û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫"])
        except:
            stock = None
        style = ""
        if stock is not None:
            if stock < 30:
                style = 'color: red'
            elif stock < 100:
                style = 'color: yellow'
            else:
                style = 'color: lightgreen'
        return ['' if col != "–û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫" else style for col in row.index]
    
    styled_df = filtered_df.style.apply(highlight_stock, axis=1)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    styled_df = styled_df.format({
        '–†–µ–π—Ç–∏–Ω–≥': '{:.1f}',
        '–¶–µ–Ω–∞ (—Ä—É–±)': '{:.2f}',
        '–û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫': '{:.0f}',
        '–ü—Ä–æ–¥–∞–∂–∏, –∫–æ–ª-–≤–æ': '{:.0f}',
        '–î–Ω–µ–π –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ': '{:.0f}',
        '–°—Ä–µ–¥–Ω—è—è —Ä–µ–∫–ª–∞–º–Ω–∞—è —Å—Ç–∞–≤–∫–∞': '{:.2f}'
    })
    
    st.dataframe(styled_df, use_container_width=True)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel-—Ñ–∞–π–ª–∞ –∏–∑ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ DataFrame
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        filtered_df.to_excel(writer, index=False, sheet_name='FilteredData')
    excel_data = output.getvalue()

    st.download_button(
        label="–°–∫–∞—á–∞—Ç—å Excel",
        data=excel_data,
        file_name="filtered_data.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ "–ì—Ä–∞—Ñ–∏–∫–∏"
elif st.session_state.page == 'graphs':
    st.title("–ì—Ä–∞—Ñ–∏–∫–∏")
    df = pd.DataFrame(st.session_state.data)
    colA, colB = st.columns(2)
    with colA:
        st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ —Å—É–º–º–∞—Ä–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂ –∑–∞ 30 –¥–Ω–µ–π")
        fig_sales = plot_total_daily_sales(df)
        st.plotly_chart(fig_sales, use_container_width=True)
        message_sales = """–í—Å–ø–ª–µ—Å–∫ –ø—Ä–æ–¥–∞–∂ –≤ –Ω–∞—á–∞–ª–µ –º–µ—Å—è—Ü–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–ø—Ä—è–º—É—é —Å–≤—è–∑–∞–Ω —Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π 8 –º–∞—Ä—Ç–∞. 
                            –û–±—ã—á–Ω–æ –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π —Å–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏ –∏ —Å–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã. 
                            –ü–æ—Å–ª–µ, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è —Å–ø–∞–¥ –ø—Ä–æ–¥–∞–∂, –∏–∑ —Å–Ω–∏–∂–µ–Ω–∏—è —Å–ø—Ä–æ—Å–∞
                            –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏, —á—Ç–æ –∏ –æ—Ç—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –ø–∞–¥–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –∫ —Å–µ—Ä–µ–¥–∏–Ω–µ –∏ –∫–æ–Ω—Ü—É –º–µ—Å—è—Ü–∞.
                        """
        st.write(message_sales)

        st.subheader("–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É —Ü–µ–Ω–æ–π –∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏")
        fig_price = plot_price_vs_sales(df)
        st.plotly_chart(fig_price, use_container_width=True)
        message_correlation = """
            –ù–µ—Ç —è—Ä–∫–æ –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ–π –ª–∏–Ω–µ–π–Ω–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏. –¢–æ—á–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–∞–æ—Ç–∏—á–Ω–æ,
            —Ö–æ—Ç—è –∏ –ø—Ä–æ—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è, —á—Ç–æ —Å–∞–º—ã–µ –±–æ–ª—å—à–∏–µ –æ–±—ä—ë–º—ã –ø—Ä–æ–¥–∞–∂ –≤ —Å—Ä–µ–¥–Ω–µ–º —Ü–µ–Ω–æ–≤–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ. 
                """
        st.write(message_correlation)

        st.subheader("–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç–∑—ã–≤–æ–≤")
        fig_reviews = plot_reviews_segments(df, low_threshold=100)  # –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        st.plotly_chart(fig_reviews, use_container_width=True)

        message_reviews = """ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ —É–∂–µ —É—Å–ø–µ–ª–∞ –Ω–∞–±—Ä–∞—Ç—å —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤,
          —á—Ç–æ –ø–æ–≤—ã—à–∞–µ—Ç –¥–æ–≤–µ—Ä–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∏ –æ–±–ª–µ–≥—á–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ. –¢–µ–º –Ω–µ –º–µ–Ω–µ–µ, –ø–æ—á—Ç–∏ –ø–æ–ª–æ–≤–∏–Ω–∞ —Ç–æ–≤–∞—Ä–æ–≤
            (–æ–∫–æ–ª–æ 44%) –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤, –∏ –∏–º –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞ –∏–ª–∏ —Å—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ 
            –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤.
            """
        st.write(message_reviews)

        st.subheader("–ê–∫—Ü–∏–∏ & –ü—Ä–æ–¥–∞–∂–∏")
        fig_sales_action = plot_sales_action_heatmap(df)
        st.plotly_chart(fig_sales_action, use_container_width=True)

        st.subheader("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–∞")
        fig_photos = plot_photos_distribution(df, nbins=20)  # –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∏—Å–ª–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        st.plotly_chart(fig_photos, use_container_width=True)

    with colB:
        st.subheader("ABC –∞–Ω–∞–ª–∏–∑")
        fig = plot_abc_classic(df)
        st.plotly_chart(fig, use_container_width=True)
        message_abc = """–ì—Ä–∞—Ñ–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç ¬´–ø—Ä–∞–≤–∏–ª–æ –ü–∞—Ä–µ—Ç–æ¬ª (20% —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏–Ω–æ—Å—è—Ç 80% –ø—Ä–æ–¥–∞–∂) 
                    –∏–ª–∏ –±–ª–∏–∑–∫–∏–π –∫ –Ω–µ–º—É –ø—Ä–∏–Ω—Ü–∏–ø. –ß–µ–º –∫—Ä—É—á–µ –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –æ—Ä–∞–Ω–∂–µ–≤–∞—è –∫—Ä–∏–≤–∞—è –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–π 
                    –¥–æ–ª–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ —á–µ–º –¥–ª–∏–Ω–Ω–µ–µ ¬´—Ö–≤–æ—Å—Ç¬ª —Å–ø—Ä–∞–≤–∞, —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è 
                    –ø—Ä–æ–¥–∞–∂ –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º –Ω–∞–±–æ—Ä–µ –ø–æ–∑–∏—Ü–∏–π.
                 """
        st.write(message_abc)

        st.subheader("–¶–µ–Ω–æ–≤–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è")
        fig_segments = plot_price_segments(df)
        st.plotly_chart(fig_segments, use_container_width=True)
        message_segments = """
             –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Å–º–µ—â—ë–Ω –≤ —Å—Ç–æ—Ä–æ–Ω—É —Å—Ä–µ–¥–Ω–µ–≥–æ –∏ –≤—ã—Å–æ–∫–æ–≥–æ —Ü–µ–Ω–æ–≤—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤. 
             –≠—Ç–æ –º–æ–∂–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ç–æ–º, —á—Ç–æ –∫–æ–º–ø–∞–Ω–∏—è –¥–µ–ª–∞–µ—Ç —Å—Ç–∞–≤–∫—É –Ω–∞ –±–æ–ª–µ–µ –¥–æ—Ä–æ–≥–∏–µ 
             —Ç–æ–≤–∞—Ä—ã –ª–∏–±–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—é, –≥–æ—Ç–æ–≤—É—é —Ç—Ä–∞—Ç–∏—Ç—å –±–æ–ª—å—à–µ.
        """
        st.write(message_segments)

        st.subheader("–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É")
        fig_ratings = plot_ratings_distribution(df)
        st.plotly_chart(fig_ratings, use_container_width=True)
        message_reviews_rating = """
        –û—Å–Ω–æ–≤–Ω–∞—è –º–∞—Å—Å–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 4‚Äì5 –∑–≤—ë–∑–¥. 
        –≠—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ –±–æ–ª—å—à–∞—è —á–∞—Å—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –ø–æ–ª—É—á–∞–µ—Ç –≤—ã—Å–æ–∫–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π, 
        —á—Ç–æ –≤ —Ü–µ–ª–æ–º —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤—É–µ—Ç –æ —Ö–æ—Ä–æ—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤.
            """
        st.write(message_reviews_rating)

        st.subheader("–£—á–∞—Å—Ç–∏–µ –≤ –∞–∫—Ü–∏–∏")
        fig_action = plot_action_distribution(df)
        st.plotly_chart(fig_action, use_container_width=True)

        st.subheader("–î–Ω–µ–π –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ")
        fig_colors = plot_marketplace_days_distribution(df, nbins=50)
        st.plotly_chart(fig_colors, use_container_width=True)
